{"version":3,"sources":["common/Footer/Footer.jsx","common/Loader/Loader.jsx","common/Notification/Notification.jsx","notes/Note.jsx","notes/NoteApp.jsx","services/notes.js","index.js"],"names":["Footer","appName","style","color","fontSize","fontWeight","border","position","background","bottom","margin","padding","width","CustomLoader","height","display","justifyContent","alignItems","type","Notification","message","className","defaultProps","Note","content","important","onToggleChanged","label","onClick","NoteApp","useState","notes","setNotes","newNote","setNewNote","error","setError","loading","setLoading","noteRef","React","createRef","getNotes","axios","get","then","response","data","catch","err","finally","_","onHandleSubmit","event","preventDefault","find","note","alert","newObject","noteObject","id","Math","max","map","date","Date","toISOString","random","post","toString","onHandleChangeNote","target","value","onHandleToggleChanged","modifiedNote","put","update","newNotes","useEffect","StrictMode","key","onSubmit","ref","placeholder","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5775799.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Footer({ appName }) {\r\n  const footerStyle = {\r\n    color: 'black',\r\n    fontSize: '1.5em',\r\n    fontWeight: 'bold',\r\n    border: '2px solid black',\r\n    position: 'fixed',\r\n    background: 'yellowgreen',\r\n    bottom: 0,\r\n    margin: 5,\r\n    padding: 5,\r\n    width: '96%',\r\n  };\r\n  return (\r\n    <footer style={footerStyle}>\r\n      <em>{appName} by Chety Clooney</em>\r\n    </footer>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nexport function CustomLoader() {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Loader type='Audio' color='#00BFFF' height={80} width={80} />\r\n    </div>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport './style.css';\r\n\r\nexport function Notification({ message, type }) {\r\n  if (!message) {\r\n    return null;\r\n  }\r\n  return <div className={`notification ${type}`}>{message}</div>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n  type: PropTypes.oneOf(['error', 'info']),\r\n};\r\n\r\nNotification.defaultProps = {\r\n  type: 'info',\r\n};\r\n","import React from 'react';\r\n\r\nexport function Note({ content, important, onToggleChanged }) {\r\n  const label = important ? 'Make Unnecessary' : 'Make Important';\r\n  return (\r\n    <>\r\n      <li>\r\n        {content} {'  '} <button onClick={onToggleChanged}>{label}</button>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n","import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\nimport {\r\n    Footer\r\n} from '../common/Footer/Footer';\r\nimport {\r\n    CustomLoader\r\n} from '../common/Loader/Loader';\r\nimport {\r\n    Notification\r\n} from '../common/Notification/Notification';\r\nimport {\r\n    create,\r\n    getAll,\r\n    update\r\n} from '../services/notes';\r\nimport {\r\n    Note\r\n} from './Note';\r\n\r\nexport function NoteApp() {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const noteRef = React.createRef();\r\n\r\n    function getNotes() {\r\n        getAll()\r\n            .then((data) => {\r\n                setNotes(data);\r\n                setError('');\r\n            })\r\n            .catch((err) => {\r\n                const message = `Error occured while getting note list. Detail: ${err.message}`;\r\n                setError(message);\r\n            })\r\n            .finally((_) => {\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    useEffect(getNotes, []);\r\n\r\n    function onHandleSubmit(event) {\r\n        event.preventDefault();\r\n        const foundedNote = notes.find((note) => note.content === newNote);\r\n        if (foundedNote) {\r\n            alert(`A note with ${newNote} is already exists`);\r\n            return;\r\n        }\r\n        const id = Math.max(...notes.map((note) => note.id)) + 1;\r\n        const noteObject = {\r\n            id,\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n        };\r\n        create(noteObject)\r\n            .then((_) => {\r\n                setNewNote('');\r\n                getNotes();\r\n            })\r\n            .catch((err) => {\r\n                alert(\r\n                    `Something went wrong when add note. Please try again later. Err* ${err}`\r\n                );\r\n                setError(err.toString());\r\n            })\r\n            .finally((_) => {\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    function onHandleChangeNote(event) {\r\n        setNewNote(event.target.value);\r\n    }\r\n\r\n    function onHandleToggleChanged(id) {\r\n        return function () {\r\n            const note = notes.find((note) => note.id === id);\r\n            const modifiedNote = {\r\n                ...note,\r\n                important: !note.important\r\n            };\r\n\r\n            update(id, modifiedNote).then((data) => {\r\n                const newNotes = notes.map((note) => (note.id !== id ? note : data));\r\n                setNotes(newNotes);\r\n            });\r\n        };\r\n    }\r\n\r\n    function render() {\r\n        return (<\r\n            React.StrictMode> {\r\n            loading ? < CustomLoader / > : null\r\n            } <\r\n            Notification message = {\r\n            error\r\n        }\r\n            /> <\r\n            ul > {\r\n            notes.map(({\r\n            id,\r\n            content,\r\n            important\r\n        }) => ( <\r\n            Note key = {\r\n                id\r\n            }\r\n            important = {\r\n                important\r\n            }\r\n            content = {\r\n                content\r\n            }\r\n            onToggleChanged = {\r\n                onHandleToggleChanged(id)\r\n            }\r\n            />\r\n            ))\r\n        } <\r\n            /ul> <\r\n            form onSubmit = {\r\n                onHandleSubmit\r\n            } >\r\n            <\r\n            input ref = {\r\n                noteRef\r\n            }\r\n            type = 'text'\r\n            placeholder = 'Enter Note...'\r\n            onChange = {\r\n                onHandleChangeNote\r\n            }\r\n            value = {\r\n                newNote\r\n            }\r\n            /> <\r\n            button type = 'submit' > Add < /button> <\r\n            /form> <\r\n            Footer appName = 'Note App' / >\r\n            <\r\n            /React.StrictMode>\r\n            );\r\n            }\r\n\r\n            return render();\r\n            }\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl).then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios\r\n    .put(`${baseUrl}/${id}`, newObject)\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject).then((response) => response.data);\r\n};\r\nexport { getAll, update, create };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { NoteApp } from './notes/NoteApp';\nconst App = () => {\n  return <NoteApp />;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}